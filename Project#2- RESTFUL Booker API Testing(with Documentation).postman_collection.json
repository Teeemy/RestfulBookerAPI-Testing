{
	"info": {
		"_postman_id": "f6296ebc-f444-48f0-9258-bcc7fc1ed15f",
		"name": "Project#2- RESTFUL Booker API Testing(with Documentation)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29573669"
	},
	"item": [
		{
			"name": "Create Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"TC1#-Verify status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"TC2#-Verify Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"TC3#-Verify Token is present in the response\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.token).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"TC4#-Verify Token is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"TC5#-Verify Token is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/auth",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Bookings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log('After Request')",
							"",
							"console.log(pm.response.status)",
							"",
							"pm.test('Tc1#-Verify status code', function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test('TC2#-Verify status message', function () {",
							"    pm.expect(pm.response.status).to.equal('OK');",
							"})",
							"",
							"pm.test('TC3#-Verify response in JSON',function () {",
							"    console.log(pm.response.json());",
							"    ",
							"})",
							"",
							"pm.test(\"TC4#-Verify Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"TC5#-Verify that the response contains an array of bookings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"TC6#-Verify Bookingid is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function (booking) {",
							"        pm.expect(booking.bookingid).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Bookingid should be a non-negative integer\");",
							"    });",
							"});",
							"",
							"pm.test(\"TC7#-Verify Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/461",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"461"
					]
				},
				"description": "\nThis API endpoint makes an HTTP GET request to retrieve the booking details for a specific booking ID. The response will be in JSON format and will include the booking details such as first name, last name, total price, deposit paid status, booking dates (check-in and check-out), and any additional needs.\n\nThe response will have a status code of 200 indicating a successful request, and the content type will be application/json.\n\nThe response will include the booking details with some fields possibly empty or with default values.\n\n"
			},
			"response": []
		},
		{
			"name": "Create Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Tc1#-Verify status code', function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"    console.log(pm.response.code);",
							"})",
							"",
							"pm.test('TC2#-Verify status message', function () {",
							"    pm.expect(pm.response.status).to.equal('OK');",
							"    console.log(pm.response.status);",
							"})",
							"",
							"pm.test('TC3#-Verify Response is an object with bookingid property', function () {",
							"    pm.expect(pm.response.json()).to.be.an('object').and.to.have.property('bookingid');",
							"    console.log(pm.response.json());",
							"})",
							"",
							"pm.test('TC4#-Verify Response has non-null bookingid', function () {",
							"    var responseData = pm.response.json();",
							"    var bookingid = responseData['bookingid'];",
							"    pm.expect(bookingid).not.to.be.null;",
							"    console.log(responseData.bookingid);",
							"})",
							"",
							"pm.test('TC5#-Verify Response content type is application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"    console.log(pm.response.headers.get('Content-Type'));",
							"})",
							"",
							"pm.test('TC6#-Schema is valid', function () {",
							"    var schema = {",
							"        type: 'object',",
							"        properties: {",
							"            bookingid: { type: 'number' },",
							"            booking: {",
							"                type: 'object',",
							"                properties: {",
							"                    firstname: { type: 'string' },",
							"                    lastname: { type: 'string' },",
							"                    totalprice: { type: 'number' },",
							"                    depositpaid: { type: 'boolean' },",
							"                    bookingdates: {",
							"                        type: 'object',",
							"                        properties: {",
							"                            checkin: { type: 'string' },",
							"                            checkout: { type: 'string' }",
							"                        },",
							"                        required: [",
							"                            'checkin',",
							"                            'checkout'",
							"                        ]",
							"                    },",
							"                    additionalneeds: { type: 'string' }",
							"                },",
							"                required: [",
							"                    'firstname',",
							"                    'lastname',",
							"                    'totalprice',",
							"                    'depositpaid',",
							"                    'bookingdates',",
							"                    'additionalneeds'",
							"                ]",
							"            }",
							"        },",
							"        required: [",
							"            'bookingid',",
							"            'booking'",
							"        ]",
							"    };",
							"    var response = pm.response.json();",
							"    pm.expect(tv4.validate(response, schema)).to.be.true;",
							"})",
							"",
							"pm.test('Tc7#-Verify firstname is Jim', function () {",
							"    var responseData = pm.response.json();",
							"    console.log(responseData.booking.firstname);",
							"    pm.expect(responseData.booking.firstname).to.equal(\"Jim\")",
							"",
							"pm.test('Tc8#-Verify lastname is Brown', function () {",
							"    var responseData = pm.response.json();",
							"    console.log(responseData.booking.lastname);",
							"     pm.expect(responseData.booking.lastname).to.equal(\"Brown\")",
							"})",
							"",
							"pm.test('Tc9#-Verify checkin', function () {",
							"    var responseData = pm.response.json();",
							"    console.log(responseData.booking.bookingdates.checkin);",
							"",
							"pm.test('Tc10#-Verify checkout', function () {",
							"    var responseData = pm.response.json();",
							"    console.log(responseData.booking.bookingdates.checkout);",
							"})",
							"",
							"})",
							"",
							"pm.test('Tc11#-Verify totalprice is greater than 0', function () {",
							"    var responseData = pm.response.json();",
							"    console.log(responseData.booking.totalprice);",
							"    pm.expect(responseData.booking.totalprice).to.be.greaterThan(0);",
							"});",
							"",
							"pm.test('Tc12#-Verify totalprice is a number', function () {",
							"    var responseData = pm.response.json();",
							"    console.log(responseData.booking.totalprice);",
							"    pm.expect(responseData.booking.totalprice).to.be.a(\"number\");",
							"})",
							"",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pre-reqest is a javascript code before making any request\r",
							"//console.log(\"I will run before request\")\r",
							"//var a = 10\r",
							"//var b = 20\r",
							"//console.log(a+b)//\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2024-03-11\",\r\n        \"checkout\" : \"2024-03-14\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					]
				},
				"description": "\nThis endpoint allows you to create a new booking by sending an HTTP POST request to the specified URL. The request should include the booking details such as firstname, lastname, totalprice, depositpaid, bookingdates (checkin and checkout), and additionalneeds in the request body.\n\n### Request Body\n- firstname (string, required): The first name of the guest for the booking.\n- lastname (string, required): The last name of the guest for the booking.\n- totalprice (number, required): The total price for the booking.\n- depositpaid (boolean, required): Indicates if the deposit has been paid for the booking.\n- bookingdates (object, required): The check-in and check-out dates for the booking.\n  - checkin (string, required): The check-in date in the format \"YYYY-MM-DD\".\n  - checkout (string, required): The check-out date in the format \"YYYY-MM-DD\".\n- additionalneeds (string, required): Any additional needs or requests for the booking.\n\n### Response\nUpon successful creation of the booking, the API responds with a status code of 200 and a JSON object containing the bookingid and the booking details, including the firstname, lastname, totalprice, depositpaid, bookingdates, and additionalneeds.\n\nExample Response:\n```json\n{\n    \"bookingid\": 0,\n    \"booking\": {\n        \"firstname\": \"\",\n        \"lastname\": \"\",\n        \"totalprice\": 0,\n        \"depositpaid\": true,\n        \"bookingdates\": {\n            \"checkin\": \"\",\n            \"checkout\": \"\"\n        },\n        \"additionalneeds\": \"\"\n    }\n}\n```\n"
			},
			"response": []
		},
		{
			"name": "Update Bookings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token=abc123"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/1",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Partial Update Bookings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token=abc123"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\"\r\n}"
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/1",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token=abc123"
					}
				],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/461",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"461"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ping Req. Check if API is working",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/ping",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		}
	]
}